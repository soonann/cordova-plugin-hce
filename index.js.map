{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/hce/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuC/C,uBAAiB;;;;IAExC;;;;;OAKG;;;;;;;IAEH,qCAAuB;;;;;;cAAC,SAA0B,EAAE,IAAe;QACjE,MAAM,CAAC;KACR;IACD;;;;;OAKG;;;;;;;IAEH,yCAA2B;;;;;;cAAC,EAAuB,EAAE,IAAe;QAClE,MAAM,CAAC;KACR;IAGD;;;;;;OAMG;;;;;;;;IAEH,0BAAY;;;;;;;cAAC,QAAoB,EAAE,OAAkB,EAAE,OAAkB;QACvE,MAAM,CAAC;KACR;;gBAnCF,UAAU;;;QASR,OAAO,EAAE;;mDACiD,QAAQ;;sDAElE;;QAOA,OAAO,EAAE;;mDACkD,QAAQ;;0DAEnE;;QAUA,OAAO,EAAE;;yCACa,UAAU,EAAY,QAAQ,EAAY,QAAQ;;2CAExE;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAlCU,GAAG;QAVf,MAAM,CAAC;YACN,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,oBAAoB;YAC5B,SAAS,EAAE,KAAK;YAChB,IAAI,EAAE,2CAA2C;YACjD,OAAO,EAAE,EAAE;YACX,gBAAgB,EAAE,CAAC,YAAY,CAAC;YAChC,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;OAEW,GAAG,EAmCf;cA5ED;EAyCyB,iBAAiB;SAA7B,GAAG","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name hce\n * @description\n * HCE Cordova Wrapper\n *\n * @usage\n * ```typescript\n * import { hce } from '@ionic-native/hce';\n *\n *\n * constructor(private hce: hce) { }\n *\n * ...\n *\n * function onCommand(command){\n *   var commandAsBytes = new Uint8Array(command);\n *   var commandAsString = hce.util.byteArrayToHexString(commandAsBytes);\n *\n *   // do something with the command\n *\n *   // send the response\n *   hce.sendReponse(commandResponse);\n * }\n * this.hce.registerCommandCallback().then(onCommand);\n *\n * ```\n */\n@Plugin({\n  pluginName: 'hce',\n  plugin: 'cordova-plugin-hce',\n  pluginRef: 'hce',\n  repo: 'https://github.com/don/cordova-plugin-hce',\n  install: '',\n  installVariables: ['AID_FILTER'],\n  platforms: ['Android']\n})\n@Injectable()\nexport class HCE extends IonicNativePlugin {\n\n  /**\n   * Registers command receiver.\n   * @param onCommand {HCECommandEvent} The event handler.\n   * @param fail {Function} Error event handler.\n   *\n   */\n  @Cordova()\n  registerCommandCallback(onCommand: HCECommandEvent, fail?: Function): void {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * Registers Deactivated receiver.\n   * @param ok {HCEDeactivatedEvent} Success event handler.\n   * @param fail {Function} Error event handler.\n   *\n   */\n  @Cordova()\n  registerDeactivatedCallback(ok: HCEDeactivatedEvent, fail?: Function): void {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n\n\n  /**\n   * Sends response APDU.\n   * @param response {Uint8Array} Response\n   * @param success {string} Success Callback.\n   * @param success {string} Failure Callback.\n   *\n   */\n  @Cordova()\n  sendResponse(response: Uint8Array, success?: Function, failure?: Function): void {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n}\n\nexport type HCECommandEvent = (command: Uint8Array) => void;\nexport type HCEDeactivatedEvent = (command: number) => void;\n"]}